ETIQUETAS
* Script 
    Atributos
    - src: para referenciar archivos externos.

VARIABLES
    - let: palabra reservada. Usado para crear variables.
        Ej: let nombre = "nombre";
    - const: Usado para crear variables.
    Diferencia entre "let" y "const"
        - Regla general: nunca cambiar el valor de una variable.
        - Usamos let: cuando queramos cambiar el valor de una variable.
        - Usamos const: cuando no vamos a cambiar el valor de la variable. Y si lo hacemos lanza un error.

**********************************************************************************************************
************************************** TIPOS DE DATOS ****************************************************
**********************************************************************************************************
TIPOS DE DATOS
* Primitivos       
    - Number        
    - String        
    - Boolean       
    - Undefined     
    - Null          

* De referencia
    - Array
    - Object
    - Functions
    - Clases

OBJETOS
let persona = {
	nombre: "alex",
	edad: 26,
	sexo: hombre,	//recomendable la coma al final
};
//llamado como llave-valor, atributo, propiedad.

* Acceder a una sola propiedad
    console.log(persona.nombre);    //1er manera
    console.log(persona['nombre']); //2da manera

* Modificar una propiedad
    persona.nombre = "daniel";
    persona['nombre'] = "jose";

* Eliminar una propiedad
    delete persona.sexo;

ARRAYS
* Definir un Array
let animales = ['perro', 'gato'];
//comienzan desde el cero.

* Acceder a un elemento
console.log(animales[0]);

* Modificar un elemento
animales[0] = 'conejo';

* Añadir un elemento
animales[2] = 'pollo';

FUNCIONES
* Crear funciones
    function suma(a, b) {  //se llaman parámetros cuando se definen en la función
    return a + b;
    }

* Llamar a las funciones
    saludar();
    let resultado = suma(5, 6, 1, 2, 3);    //se llaman argumentos cuando se pasan valores a la función

DECLARACIONES Y EXPRESIONES
* Declaration: si vamos a crear algo que va a ser utilizado en un futuro.
    - let //variable
    - const //constante
    - function / function*
    - async function / async function*
    - Clase
    - export / import
 * Statements
    - if
    - for
    - else
    - switch

* Expression: cada vez que el codigo hace algo y podemos obtener un valor de este, estamos hablando de un expression.
    - //ej la suma de 2 numeros
    - //el llamado de una función  miFunction();
    - //la asignación de un valor a una variable.   x=4;

    En resumidas palabras:
    - si le podemos hacer un console.log() entonces es una expresión.
    - si no le podemos hacer un console.log(let), entonces es una declaración.

**********************************************************************************************************
************************************** OPERADORES ********************************************************
**********************************************************************************************************
OPERADORES
* Aritméticos
    - suma              // console.log(a + b); 
    - resta             // console.log(a - b); 
    - multiplicacion    // console.log(a * b); 
    - division          // console.log(a / b); 
    - modulo            // console.log(a % b); 
    - potencia          // console.log(a ** b); 

    - Incrementar
    console.log(++a);   // 5 primero incrementa y luego imprime
    console.log(a++);   // 5 primero imprime y luego incrementa
    console.log(a);    // 6

    - Decrementar
    console.log(--a);   // 7 primero decrementa y luego imprime
    console.log(a--);   // 7 primero imprime y luego decrementa
    console.log(a);    // 6

* Asignación
    - Ejemplo:
        let a = 4;
        a = a + 4;
        a += 5; //lo mismo para todas las operaciones aritmeticas.

* Comparación
    - Ejemplo:
        //Estos 2 se utilizaban antiguamente por que son propensos a errores. No utilizar.
            console.log(a == 8);       
            console.log(a != 8);       
        //Estos 2 son los que se utilizan actualmente. 
            console.log(a === '8');   
            console.log(a !== '8');    

* Lógicos
    - AND &&
    - OR ||
    - NOT !

* Orden de Operadores
    //1. Parentesis
    //2. Multiplicacion y division
    //3. Suma y resta

* Ternario
    // expresion ? 'si es true' : 'si es false'
    // Ej: let acceso = edad > 17 ? 'Acceso permitido' : 'Acceso denegado';

**********************************************************************************************************
************************************** CONTROL FLUJO *****************************************************
**********************************************************************************************************
CONTROL DE FLUJO
* IF
    if (condicion) {
        Bloque de código
    }

* ELSE
    if (condicion) {
        //Bloque de código
    } else {
        //Bloque de código
    }

* WHILE
    while (condicion) {
        // codigo a ejecutar.
        // no olvidar el aumento.
    }

* DO WHILE
    do {
        // Bloque de codigo
    } while (condicion);

* FOR
    for (inicializacion; condicion; incremento) {
        // Bloque de codigo
    }

* FOR OF: forma de recorrer los elementos de un array o de un objeto iterable.
    for (let variable of iterable) {    //animal of animales
        // código
    }
    Ej:
        let animales = ['gato', 'perro', 'pez', 'pájaro'];
        for (let animal of animales) {
            console.log(animal);
        }

* FOR IN: forma de recorrer las propiedades de un objeto.
    for (let variable in objeto) {
        // código
    }
    Ej:
        let user = {
            id: 1,
            name: 'alex',
            age: 26,
        };

        for (let prop in user) {
            console.log(prop, user[prop]);
        }
        salida:
            id 1
            name alex
            age 26

* BREAK - CONTINUE
    - break: termina el bucle
    - continue: salta a la siguiente iteración
    Ej:
    let i = 0;
    while (i < 6) {
        i++;
        if (i === 2) {
            continue;   // Salta a la siguiente iteración y no ejecuta el código que sigue
        }
        if (i === 4) {
            break;      // Termina el bucle
        }
        console.log(i);
    }
    salida:
        1, 3.

* SWITCH
    switch (expresion) {
        case valor1:
            // código
            break;
        case valor2:
            // código
            break;
        default:
            // código
    }
    Ej:
    let accion = 'saludar';
    switch (accion) {
        case 'saludar':
            console.log('Hola');
            break;
        case 'despedir':
            console.log('Adiós');
            break;
        default:
            console.log('No entiendo la acción');
    }
    salida: hola.

console.log();  // imprimir mensajes en la consola del navegador
    - typeof es un operador que devuelve el tipo de dato de una variable.
        Ej: console.log(typeof nombre);    //me muestra el tipo de dato usado.

        Type	    typeof return value	    Object wrapper
        Null	    "object"	            N/A
        Undefined	"undefined"	            N/A
        Boolean	    "boolean"	            Boolean
        Number	    "number"	            Number
        BigInt	    "bigint"             	BigInt
        String	    "string"              	String
        Symbol	    "symbol"            	Symbol
        (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#null_type)


ATAJOS
    - shift + alt + flecha(arriba/abajo) = para duplicar una línea

    - win + p = abrir el buscador de VScode para cambiar de archivo.







